/**
 * Wikitude Studio API
 * The Wikitude Studio API is a RESTful API which is used to * organize and manipulate projects and its targets * create wtc/wto files which can be used to create trackers in the Wikitude SDK with the JavaScript API * generate/publish a cloud archive to the cloud recognition service (image targets only)  Download API clients: * [`OpenAPI 3.0`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-openapi.zip) * [`JavaScript`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-javascript.zip) * [`Python`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-python.zip) * [`PHP`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-php.zip) * [`TypeScript (NodeJS)`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-typescript-node.zip) * [`Java`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-java.zip) * [`Ruby`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-ruby.zip)  This technical reference formally explains various API endpoints. Visit the [`Studio API documentation`](https://www.wikitude.com/external/doc/documentation/studio/) for a more general description. 
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.0.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CloudArchiveGenerationResponse', 'model/CreateImageTargetCollectionBody', 'model/GenerateWTCBody', 'model/GenerateWTCStatusResponse', 'model/ImageTargetCollectionResponse', 'model/SimilarityCheckBody', 'model/SimilarityCheckResponse', 'model/SimilarityCheckStatusResponse', 'model/UpdateImageTargetCollectionBody'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CloudArchiveGenerationResponse'), require('../model/CreateImageTargetCollectionBody'), require('../model/GenerateWTCBody'), require('../model/GenerateWTCStatusResponse'), require('../model/ImageTargetCollectionResponse'), require('../model/SimilarityCheckBody'), require('../model/SimilarityCheckResponse'), require('../model/SimilarityCheckStatusResponse'), require('../model/UpdateImageTargetCollectionBody'));
  } else {
    // Browser globals (root is window)
    if (!root.WikitudeStudioApiClient) {
      root.WikitudeStudioApiClient = {};
    }
    root.WikitudeStudioApiClient.ImageTargetCollectionApi = factory(root.WikitudeStudioApiClient.ApiClient, root.WikitudeStudioApiClient.CloudArchiveGenerationResponse, root.WikitudeStudioApiClient.CreateImageTargetCollectionBody, root.WikitudeStudioApiClient.GenerateWTCBody, root.WikitudeStudioApiClient.GenerateWTCStatusResponse, root.WikitudeStudioApiClient.ImageTargetCollectionResponse, root.WikitudeStudioApiClient.SimilarityCheckBody, root.WikitudeStudioApiClient.SimilarityCheckResponse, root.WikitudeStudioApiClient.SimilarityCheckStatusResponse, root.WikitudeStudioApiClient.UpdateImageTargetCollectionBody);
  }
}(this, function(ApiClient, CloudArchiveGenerationResponse, CreateImageTargetCollectionBody, GenerateWTCBody, GenerateWTCStatusResponse, ImageTargetCollectionResponse, SimilarityCheckBody, SimilarityCheckResponse, SimilarityCheckStatusResponse, UpdateImageTargetCollectionBody) {
  'use strict';

  /**
   * ImageTargetCollection service.
   * @module api/ImageTargetCollectionApi
   * @version 3.0.0
   */

  /**
   * Constructs a new ImageTargetCollectionApi. 
   * @alias module:api/ImageTargetCollectionApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create Image Target Collection
     * Create a new target collection in your account.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} contentType The Content Type of the body. Must be set to application/json.
     * @param {module:model/CreateImageTargetCollectionBody} createImageTargetCollectionBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ImageTargetCollectionResponse} and HTTP response
     */
    this.createImageTargetCollectionWithHttpInfo = function(xVersion, xToken, contentType, createImageTargetCollectionBody) {
      var postBody = createImageTargetCollectionBody;

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling createImageTargetCollection");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling createImageTargetCollection");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createImageTargetCollection");
      }

      // verify the required parameter 'createImageTargetCollectionBody' is set
      if (createImageTargetCollectionBody === undefined || createImageTargetCollectionBody === null) {
        throw new Error("Missing the required parameter 'createImageTargetCollectionBody' when calling createImageTargetCollection");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken,
        'Content-Type': contentType
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ImageTargetCollectionResponse;

      return this.apiClient.callApi(
        '/targetCollection', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create Image Target Collection
     * Create a new target collection in your account.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} contentType The Content Type of the body. Must be set to application/json.
     * @param {module:model/CreateImageTargetCollectionBody} createImageTargetCollectionBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ImageTargetCollectionResponse}
     */
    this.createImageTargetCollection = function(xVersion, xToken, contentType, createImageTargetCollectionBody) {
      return this.createImageTargetCollectionWithHttpInfo(xVersion, xToken, contentType, createImageTargetCollectionBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Image Target Collection
     * Delete a particular target collection from your account.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteImageTargetCollectionWithHttpInfo = function(xVersion, xToken, tcId) {
      var postBody = null;

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling deleteImageTargetCollection");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling deleteImageTargetCollection");
      }

      // verify the required parameter 'tcId' is set
      if (tcId === undefined || tcId === null) {
        throw new Error("Missing the required parameter 'tcId' when calling deleteImageTargetCollection");
      }


      var pathParams = {
        'tcId': tcId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/targetCollection/{tcId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete Image Target Collection
     * Delete a particular target collection from your account.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteImageTargetCollection = function(xVersion, xToken, tcId) {
      return this.deleteImageTargetCollectionWithHttpInfo(xVersion, xToken, tcId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Generate Cloud Archive
     * DEPRECATED - Generate a Cloud Archive from an existing Target Collection. The call is asynchronous and contains a path in the response header (Location) from which the status of the generation can be requested (see Status - Generate Cloud Archive). As of release 4.0.0 this endpoint will return error TARGET_COLLECTION_IS_UP_TO_DATE with status code 412, since the archive will be generated automatically in the background in the future. This endpoint is marked as \&quot;deprecated\&quot; since the behaviour will slightly change. However, this endpoint will still exist in version 3. 
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CloudArchiveGenerationResponse} and HTTP response
     */
    this.generateCloudArchiveWithHttpInfo = function(xVersion, xToken, tcId) {
      var postBody = null;

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling generateCloudArchive");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling generateCloudArchive");
      }

      // verify the required parameter 'tcId' is set
      if (tcId === undefined || tcId === null) {
        throw new Error("Missing the required parameter 'tcId' when calling generateCloudArchive");
      }


      var pathParams = {
        'tcId': tcId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CloudArchiveGenerationResponse;

      return this.apiClient.callApi(
        '/targetCollection/{tcId}/generation/cloudarchive', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Generate Cloud Archive
     * DEPRECATED - Generate a Cloud Archive from an existing Target Collection. The call is asynchronous and contains a path in the response header (Location) from which the status of the generation can be requested (see Status - Generate Cloud Archive). As of release 4.0.0 this endpoint will return error TARGET_COLLECTION_IS_UP_TO_DATE with status code 412, since the archive will be generated automatically in the background in the future. This endpoint is marked as \&quot;deprecated\&quot; since the behaviour will slightly change. However, this endpoint will still exist in version 3. 
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CloudArchiveGenerationResponse}
     */
    this.generateCloudArchive = function(xVersion, xToken, tcId) {
      return this.generateCloudArchiveWithHttpInfo(xVersion, xToken, tcId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Generate WTC
     * Generates a WTC file out of an existing Target Collection with up to 1000 targets. The call is asynchronous and contains a path in the response header (Location) from which the status of the generation can be requested (see Status - Generate WTC). 
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} contentType The Content Type of the body. Must be set to application/json.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @param {module:model/GenerateWTCBody} generateWTCBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GenerateWTCStatusResponse} and HTTP response
     */
    this.generateWTCWithHttpInfo = function(xVersion, xToken, contentType, tcId, generateWTCBody) {
      var postBody = generateWTCBody;

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling generateWTC");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling generateWTC");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling generateWTC");
      }

      // verify the required parameter 'tcId' is set
      if (tcId === undefined || tcId === null) {
        throw new Error("Missing the required parameter 'tcId' when calling generateWTC");
      }

      // verify the required parameter 'generateWTCBody' is set
      if (generateWTCBody === undefined || generateWTCBody === null) {
        throw new Error("Missing the required parameter 'generateWTCBody' when calling generateWTC");
      }


      var pathParams = {
        'tcId': tcId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken,
        'Content-Type': contentType
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GenerateWTCStatusResponse;

      return this.apiClient.callApi(
        '/targetCollection/{tcId}/generation/wtc', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Generate WTC
     * Generates a WTC file out of an existing Target Collection with up to 1000 targets. The call is asynchronous and contains a path in the response header (Location) from which the status of the generation can be requested (see Status - Generate WTC). 
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} contentType The Content Type of the body. Must be set to application/json.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @param {module:model/GenerateWTCBody} generateWTCBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GenerateWTCStatusResponse}
     */
    this.generateWTC = function(xVersion, xToken, contentType, tcId, generateWTCBody) {
      return this.generateWTCWithHttpInfo(xVersion, xToken, contentType, tcId, generateWTCBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Status - Generate Cloud Archive
     * Retrieves information status about a particular scheduled cloud archive generation.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @param {String} generationId Unique identifier of the asynchronous job created by a generation endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CloudArchiveGenerationResponse} and HTTP response
     */
    this.getCloudArchiveStatusWithHttpInfo = function(xVersion, xToken, tcId, generationId) {
      var postBody = null;

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling getCloudArchiveStatus");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling getCloudArchiveStatus");
      }

      // verify the required parameter 'tcId' is set
      if (tcId === undefined || tcId === null) {
        throw new Error("Missing the required parameter 'tcId' when calling getCloudArchiveStatus");
      }

      // verify the required parameter 'generationId' is set
      if (generationId === undefined || generationId === null) {
        throw new Error("Missing the required parameter 'generationId' when calling getCloudArchiveStatus");
      }


      var pathParams = {
        'tcId': tcId,
        'generationId': generationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CloudArchiveGenerationResponse;

      return this.apiClient.callApi(
        '/targetCollection/{tcId}/generation/cloudarchive/{generationId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Status - Generate Cloud Archive
     * Retrieves information status about a particular scheduled cloud archive generation.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @param {String} generationId Unique identifier of the asynchronous job created by a generation endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CloudArchiveGenerationResponse}
     */
    this.getCloudArchiveStatus = function(xVersion, xToken, tcId, generationId) {
      return this.getCloudArchiveStatusWithHttpInfo(xVersion, xToken, tcId, generationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Image Target Collection
     * Request a particular target collection from your account.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ImageTargetCollectionResponse} and HTTP response
     */
    this.getImageTargetCollectionWithHttpInfo = function(xVersion, xToken, tcId) {
      var postBody = null;

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling getImageTargetCollection");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling getImageTargetCollection");
      }

      // verify the required parameter 'tcId' is set
      if (tcId === undefined || tcId === null) {
        throw new Error("Missing the required parameter 'tcId' when calling getImageTargetCollection");
      }


      var pathParams = {
        'tcId': tcId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ImageTargetCollectionResponse;

      return this.apiClient.callApi(
        '/targetCollection/{tcId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Image Target Collection
     * Request a particular target collection from your account.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ImageTargetCollectionResponse}
     */
    this.getImageTargetCollection = function(xVersion, xToken, tcId) {
      return this.getImageTargetCollectionWithHttpInfo(xVersion, xToken, tcId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all Image Target Collections
     * Request all target collections from your account.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Set 0 to start with first entry, set e.g. to 2 to skip first 2 entries. Default value: 0
     * @param {Number} opts.limit Use positive value to define the amount of entries to return [1, 1000] per page. Default value: 1000
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ImageTargetCollectionResponse>} and HTTP response
     */
    this.getImageTargetCollectionsWithHttpInfo = function(xVersion, xToken, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling getImageTargetCollections");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling getImageTargetCollections");
      }


      var pathParams = {
      };
      var queryParams = {
        'skip': opts['skip'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ImageTargetCollectionResponse];

      return this.apiClient.callApi(
        '/targetCollection', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all Image Target Collections
     * Request all target collections from your account.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Set 0 to start with first entry, set e.g. to 2 to skip first 2 entries. Default value: 0
     * @param {Number} opts.limit Use positive value to define the amount of entries to return [1, 1000] per page. Default value: 1000
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ImageTargetCollectionResponse>}
     */
    this.getImageTargetCollections = function(xVersion, xToken, opts) {
      return this.getImageTargetCollectionsWithHttpInfo(xVersion, xToken, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Status - Similarity Check
     * Retrieves information status of a particular scheduled \&quot;Similarity Check\&quot;.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @param {String} generationId Unique identifier of the asynchronous job created by a generation endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SimilarityCheckStatusResponse} and HTTP response
     */
    this.getSimilarityCheckStatusWithHttpInfo = function(xVersion, xToken, tcId, generationId) {
      var postBody = null;

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling getSimilarityCheckStatus");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling getSimilarityCheckStatus");
      }

      // verify the required parameter 'tcId' is set
      if (tcId === undefined || tcId === null) {
        throw new Error("Missing the required parameter 'tcId' when calling getSimilarityCheckStatus");
      }

      // verify the required parameter 'generationId' is set
      if (generationId === undefined || generationId === null) {
        throw new Error("Missing the required parameter 'generationId' when calling getSimilarityCheckStatus");
      }


      var pathParams = {
        'tcId': tcId,
        'generationId': generationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SimilarityCheckStatusResponse;

      return this.apiClient.callApi(
        '/targetCollection/{tcId}/similarity/{generationId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Status - Similarity Check
     * Retrieves information status of a particular scheduled \&quot;Similarity Check\&quot;.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @param {String} generationId Unique identifier of the asynchronous job created by a generation endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SimilarityCheckStatusResponse}
     */
    this.getSimilarityCheckStatus = function(xVersion, xToken, tcId, generationId) {
      return this.getSimilarityCheckStatusWithHttpInfo(xVersion, xToken, tcId, generationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Status - Generate WTC
     * Retrieves information status about a particular scheduled WTC file generation. Once the status is completed, the WTC information can be retrieved from the Target Collection (see Get Target Collection). 
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @param {String} generationId Unique identifier of the asynchronous job created by a generation endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GenerateWTCStatusResponse} and HTTP response
     */
    this.getWTCStatusWithHttpInfo = function(xVersion, xToken, tcId, generationId) {
      var postBody = null;

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling getWTCStatus");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling getWTCStatus");
      }

      // verify the required parameter 'tcId' is set
      if (tcId === undefined || tcId === null) {
        throw new Error("Missing the required parameter 'tcId' when calling getWTCStatus");
      }

      // verify the required parameter 'generationId' is set
      if (generationId === undefined || generationId === null) {
        throw new Error("Missing the required parameter 'generationId' when calling getWTCStatus");
      }


      var pathParams = {
        'tcId': tcId,
        'generationId': generationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GenerateWTCStatusResponse;

      return this.apiClient.callApi(
        '/targetCollection/{tcId}/generation/wtc/{generationId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Status - Generate WTC
     * Retrieves information status about a particular scheduled WTC file generation. Once the status is completed, the WTC information can be retrieved from the Target Collection (see Get Target Collection). 
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @param {String} generationId Unique identifier of the asynchronous job created by a generation endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GenerateWTCStatusResponse}
     */
    this.getWTCStatus = function(xVersion, xToken, tcId, generationId) {
      return this.getWTCStatusWithHttpInfo(xVersion, xToken, tcId, generationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Similarity Check
     * Pass up to 10 items pointing to PNG or JPEG images hosted via https in the body. In order to find out whether an image is similar to an existing Target in terms of recognition and tracking behaviour a check is performed per passed image item. The Target Collection must be published and have an active Cloud Archive in place. Up to 5 (default: 1) so called \&quot;candidates\&quot; with a similarity \&quot;score\&quot; are returned per image. Image must be hosted via https and be of type PNG or JPEG. Use \&quot;maxCandidates\&quot; to define the maximum amount of candidates to return for an image. Response header value \&quot;Location\&quot; directly points to the right \&quot;Status - Similarity Check\&quot; endpoint. Best practice is to trigger \&quot;Similarity Check\&quot;, wait for \&quot;estimatedLatency\&quot; milliseconds and poll \&quot;Status - Similarity Check\&quot; endpoint every 5 seconds until its \&quot;status\&quot; is \&quot;COMPLETED\&quot;. 
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} contentType The Content Type of the body. Must be set to application/json.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @param {module:model/SimilarityCheckBody} similarityCheckBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SimilarityCheckResponse} and HTTP response
     */
    this.similarityCheckWithHttpInfo = function(xVersion, xToken, contentType, tcId, similarityCheckBody) {
      var postBody = similarityCheckBody;

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling similarityCheck");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling similarityCheck");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling similarityCheck");
      }

      // verify the required parameter 'tcId' is set
      if (tcId === undefined || tcId === null) {
        throw new Error("Missing the required parameter 'tcId' when calling similarityCheck");
      }

      // verify the required parameter 'similarityCheckBody' is set
      if (similarityCheckBody === undefined || similarityCheckBody === null) {
        throw new Error("Missing the required parameter 'similarityCheckBody' when calling similarityCheck");
      }


      var pathParams = {
        'tcId': tcId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken,
        'Content-Type': contentType
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SimilarityCheckResponse;

      return this.apiClient.callApi(
        '/targetCollection/{tcId}/similarity', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Similarity Check
     * Pass up to 10 items pointing to PNG or JPEG images hosted via https in the body. In order to find out whether an image is similar to an existing Target in terms of recognition and tracking behaviour a check is performed per passed image item. The Target Collection must be published and have an active Cloud Archive in place. Up to 5 (default: 1) so called \&quot;candidates\&quot; with a similarity \&quot;score\&quot; are returned per image. Image must be hosted via https and be of type PNG or JPEG. Use \&quot;maxCandidates\&quot; to define the maximum amount of candidates to return for an image. Response header value \&quot;Location\&quot; directly points to the right \&quot;Status - Similarity Check\&quot; endpoint. Best practice is to trigger \&quot;Similarity Check\&quot;, wait for \&quot;estimatedLatency\&quot; milliseconds and poll \&quot;Status - Similarity Check\&quot; endpoint every 5 seconds until its \&quot;status\&quot; is \&quot;COMPLETED\&quot;. 
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} contentType The Content Type of the body. Must be set to application/json.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @param {module:model/SimilarityCheckBody} similarityCheckBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SimilarityCheckResponse}
     */
    this.similarityCheck = function(xVersion, xToken, contentType, tcId, similarityCheckBody) {
      return this.similarityCheckWithHttpInfo(xVersion, xToken, contentType, tcId, similarityCheckBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Image Target Collection
     * Update a target collection from your account.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} contentType The Content Type of the body. Must be set to application/json.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @param {module:model/UpdateImageTargetCollectionBody} updateImageTargetCollectionBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ImageTargetCollectionResponse} and HTTP response
     */
    this.updateImageTargetCollectionWithHttpInfo = function(xVersion, xToken, contentType, tcId, updateImageTargetCollectionBody) {
      var postBody = updateImageTargetCollectionBody;

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling updateImageTargetCollection");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling updateImageTargetCollection");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling updateImageTargetCollection");
      }

      // verify the required parameter 'tcId' is set
      if (tcId === undefined || tcId === null) {
        throw new Error("Missing the required parameter 'tcId' when calling updateImageTargetCollection");
      }

      // verify the required parameter 'updateImageTargetCollectionBody' is set
      if (updateImageTargetCollectionBody === undefined || updateImageTargetCollectionBody === null) {
        throw new Error("Missing the required parameter 'updateImageTargetCollectionBody' when calling updateImageTargetCollection");
      }


      var pathParams = {
        'tcId': tcId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken,
        'Content-Type': contentType
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ImageTargetCollectionResponse;

      return this.apiClient.callApi(
        '/targetCollection/{tcId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update Image Target Collection
     * Update a target collection from your account.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} contentType The Content Type of the body. Must be set to application/json.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @param {module:model/UpdateImageTargetCollectionBody} updateImageTargetCollectionBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ImageTargetCollectionResponse}
     */
    this.updateImageTargetCollection = function(xVersion, xToken, contentType, tcId, updateImageTargetCollectionBody) {
      return this.updateImageTargetCollectionWithHttpInfo(xVersion, xToken, contentType, tcId, updateImageTargetCollectionBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
