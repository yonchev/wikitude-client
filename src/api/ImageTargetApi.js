/**
 * Wikitude Studio API
 * The Wikitude Studio API is a RESTful API which is used to * organize and manipulate projects and its targets * create wtc/wto files which can be used to create trackers in the Wikitude SDK with the JavaScript API * generate/publish a cloud archive to the cloud recognition service (image targets only)  Download API clients: * [`OpenAPI 3.0`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-openapi.zip) * [`JavaScript`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-javascript.zip) * [`Python`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-python.zip) * [`PHP`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-php.zip) * [`TypeScript (NodeJS)`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-typescript-node.zip) * [`Java`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-java.zip) * [`Ruby`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-ruby.zip)  This technical reference formally explains various API endpoints. Visit the [`Studio API documentation`](https://www.wikitude.com/external/doc/documentation/studio/) for a more general description. 
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.0.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateImageTargetsBody', 'model/CreateImageTargetsResponse', 'model/ImageTargetResponse', 'model/UpdateImageTargetBody'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateImageTargetsBody'), require('../model/CreateImageTargetsResponse'), require('../model/ImageTargetResponse'), require('../model/UpdateImageTargetBody'));
  } else {
    // Browser globals (root is window)
    if (!root.WikitudeStudioApiClient) {
      root.WikitudeStudioApiClient = {};
    }
    root.WikitudeStudioApiClient.ImageTargetApi = factory(root.WikitudeStudioApiClient.ApiClient, root.WikitudeStudioApiClient.CreateImageTargetsBody, root.WikitudeStudioApiClient.CreateImageTargetsResponse, root.WikitudeStudioApiClient.ImageTargetResponse, root.WikitudeStudioApiClient.UpdateImageTargetBody);
  }
}(this, function(ApiClient, CreateImageTargetsBody, CreateImageTargetsResponse, ImageTargetResponse, UpdateImageTargetBody) {
  'use strict';

  /**
   * ImageTarget service.
   * @module api/ImageTargetApi
   * @version 3.0.0
   */

  /**
   * Constructs a new ImageTargetApi. 
   * @alias module:api/ImageTargetApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create Image Targets
     * Create a set of up to 10 new Targets in a Target Collection in your account. The task to create the listed Targets is scheduled. The response body contains the initial job status. \&quot;Location\&quot;-header is the url to the GET endpoint that returns current job status information. It is recommended to query this endpoint after \&quot;estimatedLatency\&quot; milliseconds, and poll it afterwards every 10 seconds in case job status is still not \&quot;COMPLETED\&quot;. Once job status is \&quot;COMPLETED\&quot; each item holds a \&quot;target\&quot; attribute of the created target or an \&quot;error\&quot; attribute. 
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} contentType The Content Type of the body. Must be set to application/json.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @param {Object} opts Optional parameters
     * @param {Array.<CreateImageTargetsBody>} opts.createImageTargetsBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateImageTargetsResponse} and HTTP response
     */
    this.createImageTargetsWithHttpInfo = function(xVersion, xToken, contentType, tcId, opts) {
      opts = opts || {};
      var postBody = opts['createImageTargetsBody'];

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling createImageTargets");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling createImageTargets");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createImageTargets");
      }

      // verify the required parameter 'tcId' is set
      if (tcId === undefined || tcId === null) {
        throw new Error("Missing the required parameter 'tcId' when calling createImageTargets");
      }


      var pathParams = {
        'tcId': tcId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken,
        'Content-Type': contentType
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateImageTargetsResponse;

      return this.apiClient.callApi(
        '/targetCollection/{tcId}/targets', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create Image Targets
     * Create a set of up to 10 new Targets in a Target Collection in your account. The task to create the listed Targets is scheduled. The response body contains the initial job status. \&quot;Location\&quot;-header is the url to the GET endpoint that returns current job status information. It is recommended to query this endpoint after \&quot;estimatedLatency\&quot; milliseconds, and poll it afterwards every 10 seconds in case job status is still not \&quot;COMPLETED\&quot;. Once job status is \&quot;COMPLETED\&quot; each item holds a \&quot;target\&quot; attribute of the created target or an \&quot;error\&quot; attribute. 
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} contentType The Content Type of the body. Must be set to application/json.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @param {Object} opts Optional parameters
     * @param {Array.<CreateImageTargetsBody>} opts.createImageTargetsBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateImageTargetsResponse}
     */
    this.createImageTargets = function(xVersion, xToken, contentType, tcId, opts) {
      return this.createImageTargetsWithHttpInfo(xVersion, xToken, contentType, tcId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Image Target
     * Delete a particular Target from your account.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @param {String} targetId Unique identifier of the Image Target.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteImageTargetWithHttpInfo = function(xVersion, xToken, tcId, targetId) {
      var postBody = null;

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling deleteImageTarget");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling deleteImageTarget");
      }

      // verify the required parameter 'tcId' is set
      if (tcId === undefined || tcId === null) {
        throw new Error("Missing the required parameter 'tcId' when calling deleteImageTarget");
      }

      // verify the required parameter 'targetId' is set
      if (targetId === undefined || targetId === null) {
        throw new Error("Missing the required parameter 'targetId' when calling deleteImageTarget");
      }


      var pathParams = {
        'tcId': tcId,
        'targetId': targetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/targetCollection/{tcId}/target/{targetId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete Image Target
     * Delete a particular Target from your account.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @param {String} targetId Unique identifier of the Image Target.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteImageTarget = function(xVersion, xToken, tcId, targetId) {
      return this.deleteImageTargetWithHttpInfo(xVersion, xToken, tcId, targetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Image Target
     * Request a particular Image Target in a particular Target Collection.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @param {String} targetId Unique identifier of the Image Target.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ImageTargetResponse} and HTTP response
     */
    this.getImageTargetWithHttpInfo = function(xVersion, xToken, tcId, targetId) {
      var postBody = null;

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling getImageTarget");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling getImageTarget");
      }

      // verify the required parameter 'tcId' is set
      if (tcId === undefined || tcId === null) {
        throw new Error("Missing the required parameter 'tcId' when calling getImageTarget");
      }

      // verify the required parameter 'targetId' is set
      if (targetId === undefined || targetId === null) {
        throw new Error("Missing the required parameter 'targetId' when calling getImageTarget");
      }


      var pathParams = {
        'tcId': tcId,
        'targetId': targetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ImageTargetResponse;

      return this.apiClient.callApi(
        '/targetCollection/{tcId}/target/{targetId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Image Target
     * Request a particular Image Target in a particular Target Collection.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @param {String} targetId Unique identifier of the Image Target.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ImageTargetResponse}
     */
    this.getImageTarget = function(xVersion, xToken, tcId, targetId) {
      return this.getImageTargetWithHttpInfo(xVersion, xToken, tcId, targetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Status - Image Targets Creation
     * Retrieves information status about a particular scheduled targets creation.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @param {String} generationId Unique identifier of the asynchronous job created by a generation endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateImageTargetsResponse} and HTTP response
     */
    this.getImageTargetStatusWithHttpInfo = function(xVersion, xToken, tcId, generationId) {
      var postBody = null;

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling getImageTargetStatus");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling getImageTargetStatus");
      }

      // verify the required parameter 'tcId' is set
      if (tcId === undefined || tcId === null) {
        throw new Error("Missing the required parameter 'tcId' when calling getImageTargetStatus");
      }

      // verify the required parameter 'generationId' is set
      if (generationId === undefined || generationId === null) {
        throw new Error("Missing the required parameter 'generationId' when calling getImageTargetStatus");
      }


      var pathParams = {
        'tcId': tcId,
        'generationId': generationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CreateImageTargetsResponse;

      return this.apiClient.callApi(
        '/targetCollection/{tcId}/generation/targets/{generationId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Status - Image Targets Creation
     * Retrieves information status about a particular scheduled targets creation.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @param {String} generationId Unique identifier of the asynchronous job created by a generation endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateImageTargetsResponse}
     */
    this.getImageTargetStatus = function(xVersion, xToken, tcId, generationId) {
      return this.getImageTargetStatusWithHttpInfo(xVersion, xToken, tcId, generationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Image Targets
     * Request all Image Targets in a Target Collection.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @param {Object} opts Optional parameters
     * @param {String} opts.sortby Targets may be sorted by &#39;name&#39;, &#39;creDat&#39;, &#39;modDat&#39;, &#39;rating&#39;. Default value: &#39;creDat&#39;
     * @param {String} opts.sortorder Targets may be sorted ascending (&#39;asc&#39;) or descending (&#39;desc&#39;). Default value: &#39;desc&#39;
     * @param {Number} opts.skip Set 0 to start with first target, set e.g. to 2 to skip first 2 targets. Default value: 0
     * @param {Number} opts.limit Set to 0 for &#39;all targets&#39; or use positive value to define max. amount of targets to return. Default value: 0
     * @param {String} opts.s The search string to look for in target names.
     * @param {Boolean} opts.addHasAugmentations Add the hasAugmentations property.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ImageTargetResponse>} and HTTP response
     */
    this.getImageTargetsWithHttpInfo = function(xVersion, xToken, tcId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling getImageTargets");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling getImageTargets");
      }

      // verify the required parameter 'tcId' is set
      if (tcId === undefined || tcId === null) {
        throw new Error("Missing the required parameter 'tcId' when calling getImageTargets");
      }


      var pathParams = {
        'tcId': tcId
      };
      var queryParams = {
        'sortby': opts['sortby'],
        'sortorder': opts['sortorder'],
        'skip': opts['skip'],
        'limit': opts['limit'],
        's': opts['s'],
        'addHasAugmentations': opts['addHasAugmentations'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ImageTargetResponse];

      return this.apiClient.callApi(
        '/targetCollection/{tcId}/target', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Image Targets
     * Request all Image Targets in a Target Collection.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @param {Object} opts Optional parameters
     * @param {String} opts.sortby Targets may be sorted by &#39;name&#39;, &#39;creDat&#39;, &#39;modDat&#39;, &#39;rating&#39;. Default value: &#39;creDat&#39;
     * @param {String} opts.sortorder Targets may be sorted ascending (&#39;asc&#39;) or descending (&#39;desc&#39;). Default value: &#39;desc&#39;
     * @param {Number} opts.skip Set 0 to start with first target, set e.g. to 2 to skip first 2 targets. Default value: 0
     * @param {Number} opts.limit Set to 0 for &#39;all targets&#39; or use positive value to define max. amount of targets to return. Default value: 0
     * @param {String} opts.s The search string to look for in target names.
     * @param {Boolean} opts.addHasAugmentations Add the hasAugmentations property.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ImageTargetResponse>}
     */
    this.getImageTargets = function(xVersion, xToken, tcId, opts) {
      return this.getImageTargetsWithHttpInfo(xVersion, xToken, tcId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Image Target
     * Updates properties of a particular Target in your account. Currently following properties are supported: physicalHeight, metadata. 
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} contentType The Content Type of the body. Must be set to application/json.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @param {String} targetId Unique identifier of the Image Target.
     * @param {module:model/UpdateImageTargetBody} updateImageTargetBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ImageTargetResponse} and HTTP response
     */
    this.updateImageTargetWithHttpInfo = function(xVersion, xToken, contentType, tcId, targetId, updateImageTargetBody) {
      var postBody = updateImageTargetBody;

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling updateImageTarget");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling updateImageTarget");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling updateImageTarget");
      }

      // verify the required parameter 'tcId' is set
      if (tcId === undefined || tcId === null) {
        throw new Error("Missing the required parameter 'tcId' when calling updateImageTarget");
      }

      // verify the required parameter 'targetId' is set
      if (targetId === undefined || targetId === null) {
        throw new Error("Missing the required parameter 'targetId' when calling updateImageTarget");
      }

      // verify the required parameter 'updateImageTargetBody' is set
      if (updateImageTargetBody === undefined || updateImageTargetBody === null) {
        throw new Error("Missing the required parameter 'updateImageTargetBody' when calling updateImageTarget");
      }


      var pathParams = {
        'tcId': tcId,
        'targetId': targetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken,
        'Content-Type': contentType
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ImageTargetResponse;

      return this.apiClient.callApi(
        '/targetCollection/{tcId}/target/{targetId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update Image Target
     * Updates properties of a particular Target in your account. Currently following properties are supported: physicalHeight, metadata. 
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} contentType The Content Type of the body. Must be set to application/json.
     * @param {String} tcId Unique identifier of the Image Target Collection.
     * @param {String} targetId Unique identifier of the Image Target.
     * @param {module:model/UpdateImageTargetBody} updateImageTargetBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ImageTargetResponse}
     */
    this.updateImageTarget = function(xVersion, xToken, contentType, tcId, targetId, updateImageTargetBody) {
      return this.updateImageTargetWithHttpInfo(xVersion, xToken, contentType, tcId, targetId, updateImageTargetBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
