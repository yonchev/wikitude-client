/**
 * Wikitude Studio API
 * The Wikitude Studio API is a RESTful API which is used to * organize and manipulate projects and its targets * create wtc/wto files which can be used to create trackers in the Wikitude SDK with the JavaScript API * generate/publish a cloud archive to the cloud recognition service (image targets only)  Download API clients: * [`OpenAPI 3.0`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-openapi.zip) * [`JavaScript`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-javascript.zip) * [`Python`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-python.zip) * [`PHP`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-php.zip) * [`TypeScript (NodeJS)`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-typescript-node.zip) * [`Java`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-java.zip) * [`Ruby`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-ruby.zip)  This technical reference formally explains various API endpoints. Visit the [`Studio API documentation`](https://www.wikitude.com/external/doc/documentation/studio/) for a more general description. 
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.0.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GenerateHeatmapBody', 'model/GenerateHeatmapResponse', 'model/GenerateHeatmapStatusResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GenerateHeatmapBody'), require('../model/GenerateHeatmapResponse'), require('../model/GenerateHeatmapStatusResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.WikitudeStudioApiClient) {
      root.WikitudeStudioApiClient = {};
    }
    root.WikitudeStudioApiClient.HeatmapApi = factory(root.WikitudeStudioApiClient.ApiClient, root.WikitudeStudioApiClient.GenerateHeatmapBody, root.WikitudeStudioApiClient.GenerateHeatmapResponse, root.WikitudeStudioApiClient.GenerateHeatmapStatusResponse);
  }
}(this, function(ApiClient, GenerateHeatmapBody, GenerateHeatmapResponse, GenerateHeatmapStatusResponse) {
  'use strict';

  /**
   * Heatmap service.
   * @module api/HeatmapApi
   * @version 3.0.0
   */

  /**
   * Constructs a new HeatmapApi. 
   * @alias module:api/HeatmapApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Generate Heatmap
     * Generates a greyscale image out of the input image, where areas with recognition and tracking relevance are highlighted in color. This way one can better understand the rating of an image and see which areas have the highest importance for 2D recognition and tracking. Note that only JPG and non-transparent PNG files are accepted and the generated heatmap image is stored on a temporary folder which is deleted after 24 hours. Store the image on your own server in case you plan to use it in your user interface. 
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} contentType The Content Type of the body. Must be set to application/json.
     * @param {module:model/GenerateHeatmapBody} generateHeatmapBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GenerateHeatmapResponse} and HTTP response
     */
    this.generateHeatmapWithHttpInfo = function(xVersion, xToken, contentType, generateHeatmapBody) {
      var postBody = generateHeatmapBody;

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling generateHeatmap");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling generateHeatmap");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling generateHeatmap");
      }

      // verify the required parameter 'generateHeatmapBody' is set
      if (generateHeatmapBody === undefined || generateHeatmapBody === null) {
        throw new Error("Missing the required parameter 'generateHeatmapBody' when calling generateHeatmap");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken,
        'Content-Type': contentType
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GenerateHeatmapResponse;

      return this.apiClient.callApi(
        '/heatmap', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Generate Heatmap
     * Generates a greyscale image out of the input image, where areas with recognition and tracking relevance are highlighted in color. This way one can better understand the rating of an image and see which areas have the highest importance for 2D recognition and tracking. Note that only JPG and non-transparent PNG files are accepted and the generated heatmap image is stored on a temporary folder which is deleted after 24 hours. Store the image on your own server in case you plan to use it in your user interface. 
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} contentType The Content Type of the body. Must be set to application/json.
     * @param {module:model/GenerateHeatmapBody} generateHeatmapBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GenerateHeatmapResponse}
     */
    this.generateHeatmap = function(xVersion, xToken, contentType, generateHeatmapBody) {
      return this.generateHeatmapWithHttpInfo(xVersion, xToken, contentType, generateHeatmapBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Status - Generate Heatmap
     * Retrieves information status about a particular scheduled heatmap creation.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} generationId Unique identifier of the asynchronous job created by a generation endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GenerateHeatmapStatusResponse} and HTTP response
     */
    this.getHeatmapStatusWithHttpInfo = function(xVersion, xToken, generationId) {
      var postBody = null;

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling getHeatmapStatus");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling getHeatmapStatus");
      }

      // verify the required parameter 'generationId' is set
      if (generationId === undefined || generationId === null) {
        throw new Error("Missing the required parameter 'generationId' when calling getHeatmapStatus");
      }


      var pathParams = {
        'generationId': generationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GenerateHeatmapStatusResponse;

      return this.apiClient.callApi(
        '/heatmap/{generationId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Status - Generate Heatmap
     * Retrieves information status about a particular scheduled heatmap creation.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} generationId Unique identifier of the asynchronous job created by a generation endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GenerateHeatmapStatusResponse}
     */
    this.getHeatmapStatus = function(xVersion, xToken, generationId) {
      return this.getHeatmapStatusWithHttpInfo(xVersion, xToken, generationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
