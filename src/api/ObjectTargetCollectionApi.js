/**
 * Wikitude Studio API
 * The Wikitude Studio API is a RESTful API which is used to * organize and manipulate projects and its targets * create wtc/wto files which can be used to create trackers in the Wikitude SDK with the JavaScript API * generate/publish a cloud archive to the cloud recognition service (image targets only)  Download API clients: * [`OpenAPI 3.0`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-openapi.zip) * [`JavaScript`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-javascript.zip) * [`Python`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-python.zip) * [`PHP`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-php.zip) * [`TypeScript (NodeJS)`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-typescript-node.zip) * [`Java`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-java.zip) * [`Ruby`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-ruby.zip)  This technical reference formally explains various API endpoints. Visit the [`Studio API documentation`](https://www.wikitude.com/external/doc/documentation/studio/) for a more general description. 
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.0.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateObjectTargetCollectionBody', 'model/GenerateWTOBody', 'model/ObjectTargetCollectionJobResponse', 'model/ObjectTargetCollectionResponse', 'model/ObjectTargetJobResponse', 'model/UpdateObjectTargetCollectionBody'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateObjectTargetCollectionBody'), require('../model/GenerateWTOBody'), require('../model/ObjectTargetCollectionJobResponse'), require('../model/ObjectTargetCollectionResponse'), require('../model/ObjectTargetJobResponse'), require('../model/UpdateObjectTargetCollectionBody'));
  } else {
    // Browser globals (root is window)
    if (!root.WikitudeStudioApiClient) {
      root.WikitudeStudioApiClient = {};
    }
    root.WikitudeStudioApiClient.ObjectTargetCollectionApi = factory(root.WikitudeStudioApiClient.ApiClient, root.WikitudeStudioApiClient.CreateObjectTargetCollectionBody, root.WikitudeStudioApiClient.GenerateWTOBody, root.WikitudeStudioApiClient.ObjectTargetCollectionJobResponse, root.WikitudeStudioApiClient.ObjectTargetCollectionResponse, root.WikitudeStudioApiClient.ObjectTargetJobResponse, root.WikitudeStudioApiClient.UpdateObjectTargetCollectionBody);
  }
}(this, function(ApiClient, CreateObjectTargetCollectionBody, GenerateWTOBody, ObjectTargetCollectionJobResponse, ObjectTargetCollectionResponse, ObjectTargetJobResponse, UpdateObjectTargetCollectionBody) {
  'use strict';

  /**
   * ObjectTargetCollection service.
   * @module api/ObjectTargetCollectionApi
   * @version 3.0.0
   */

  /**
   * Constructs a new ObjectTargetCollectionApi. 
   * @alias module:api/ObjectTargetCollectionApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create Object Target Collection
     * Create a new Object Target Collection in your account.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} contentType The Content Type of the body. Must be set to application/json.
     * @param {module:model/CreateObjectTargetCollectionBody} createObjectTargetCollectionBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectTargetCollectionResponse} and HTTP response
     */
    this.createObjectTargetCollectionWithHttpInfo = function(xVersion, xToken, contentType, createObjectTargetCollectionBody) {
      var postBody = createObjectTargetCollectionBody;

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling createObjectTargetCollection");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling createObjectTargetCollection");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createObjectTargetCollection");
      }

      // verify the required parameter 'createObjectTargetCollectionBody' is set
      if (createObjectTargetCollectionBody === undefined || createObjectTargetCollectionBody === null) {
        throw new Error("Missing the required parameter 'createObjectTargetCollectionBody' when calling createObjectTargetCollection");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken,
        'Content-Type': contentType
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectTargetCollectionResponse;

      return this.apiClient.callApi(
        '/objectTargetCollection', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create Object Target Collection
     * Create a new Object Target Collection in your account.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} contentType The Content Type of the body. Must be set to application/json.
     * @param {module:model/CreateObjectTargetCollectionBody} createObjectTargetCollectionBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectTargetCollectionResponse}
     */
    this.createObjectTargetCollection = function(xVersion, xToken, contentType, createObjectTargetCollectionBody) {
      return this.createObjectTargetCollectionWithHttpInfo(xVersion, xToken, contentType, createObjectTargetCollectionBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Object Target Collection
     * Delete a Object Target Collection and all its Object Targets.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Object Target Collection.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteObjectTargetCollectionWithHttpInfo = function(xVersion, xToken, tcId) {
      var postBody = null;

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling deleteObjectTargetCollection");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling deleteObjectTargetCollection");
      }

      // verify the required parameter 'tcId' is set
      if (tcId === undefined || tcId === null) {
        throw new Error("Missing the required parameter 'tcId' when calling deleteObjectTargetCollection");
      }


      var pathParams = {
        'tcId': tcId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/objectTargetCollection/{tcId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete Object Target Collection
     * Delete a Object Target Collection and all its Object Targets.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Object Target Collection.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteObjectTargetCollection = function(xVersion, xToken, tcId) {
      return this.deleteObjectTargetCollectionWithHttpInfo(xVersion, xToken, tcId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Generate WTO
     * Generate a WTO file containing the Object Target Collection and all its Object Targets.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} contentType The Content Type of the body. Must be set to application/json.
     * @param {String} tcId Unique identifier of the Object Target Collection.
     * @param {module:model/GenerateWTOBody} generateWTOBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectTargetCollectionJobResponse} and HTTP response
     */
    this.generateWTOWithHttpInfo = function(xVersion, xToken, contentType, tcId, generateWTOBody) {
      var postBody = generateWTOBody;

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling generateWTO");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling generateWTO");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling generateWTO");
      }

      // verify the required parameter 'tcId' is set
      if (tcId === undefined || tcId === null) {
        throw new Error("Missing the required parameter 'tcId' when calling generateWTO");
      }

      // verify the required parameter 'generateWTOBody' is set
      if (generateWTOBody === undefined || generateWTOBody === null) {
        throw new Error("Missing the required parameter 'generateWTOBody' when calling generateWTO");
      }


      var pathParams = {
        'tcId': tcId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken,
        'Content-Type': contentType
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectTargetCollectionJobResponse;

      return this.apiClient.callApi(
        '/objectTargetCollection/{tcId}/generation/wto', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Generate WTO
     * Generate a WTO file containing the Object Target Collection and all its Object Targets.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} contentType The Content Type of the body. Must be set to application/json.
     * @param {String} tcId Unique identifier of the Object Target Collection.
     * @param {module:model/GenerateWTOBody} generateWTOBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectTargetCollectionJobResponse}
     */
    this.generateWTO = function(xVersion, xToken, contentType, tcId, generateWTOBody) {
      return this.generateWTOWithHttpInfo(xVersion, xToken, contentType, tcId, generateWTOBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Object Target Collection
     * Request a particular Object Target Collection from your account.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Object Target Collection.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectTargetCollectionResponse} and HTTP response
     */
    this.getObjectTargetCollectionWithHttpInfo = function(xVersion, xToken, tcId) {
      var postBody = null;

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling getObjectTargetCollection");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling getObjectTargetCollection");
      }

      // verify the required parameter 'tcId' is set
      if (tcId === undefined || tcId === null) {
        throw new Error("Missing the required parameter 'tcId' when calling getObjectTargetCollection");
      }


      var pathParams = {
        'tcId': tcId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ObjectTargetCollectionResponse;

      return this.apiClient.callApi(
        '/objectTargetCollection/{tcId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Object Target Collection
     * Request a particular Object Target Collection from your account.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Object Target Collection.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectTargetCollectionResponse}
     */
    this.getObjectTargetCollection = function(xVersion, xToken, tcId) {
      return this.getObjectTargetCollectionWithHttpInfo(xVersion, xToken, tcId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Status - Get Object Target Collection jobs
     * Retrieves a list of asynchronous jobs sorted by creation date.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Object Target Collection.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Set 0 to start with first collection, set e.g. to 2 to skip first 2 collections. Default value: 0
     * @param {Number} opts.limit Use positive value to define the amount of entries to return [1, 20] per page. Default value: 10
     * @param {String} opts.source filter the jobs by source. Available values (api, studio). Default value: api
     * @param {String} opts.type filter the jobs by type.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ObjectTargetJobResponse>} and HTTP response
     */
    this.getObjectTargetCollectionStatusWithHttpInfo = function(xVersion, xToken, tcId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling getObjectTargetCollectionStatus");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling getObjectTargetCollectionStatus");
      }

      // verify the required parameter 'tcId' is set
      if (tcId === undefined || tcId === null) {
        throw new Error("Missing the required parameter 'tcId' when calling getObjectTargetCollectionStatus");
      }


      var pathParams = {
        'tcId': tcId
      };
      var queryParams = {
        'skip': opts['skip'],
        'limit': opts['limit'],
        'source': opts['source'],
        'type': opts['type'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ObjectTargetJobResponse];

      return this.apiClient.callApi(
        '/objectTargetCollection/{tcId}/jobs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Status - Get Object Target Collection jobs
     * Retrieves a list of asynchronous jobs sorted by creation date.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Object Target Collection.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Set 0 to start with first collection, set e.g. to 2 to skip first 2 collections. Default value: 0
     * @param {Number} opts.limit Use positive value to define the amount of entries to return [1, 20] per page. Default value: 10
     * @param {String} opts.source filter the jobs by source. Available values (api, studio). Default value: api
     * @param {String} opts.type filter the jobs by type.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ObjectTargetJobResponse>}
     */
    this.getObjectTargetCollectionStatus = function(xVersion, xToken, tcId, opts) {
      return this.getObjectTargetCollectionStatusWithHttpInfo(xVersion, xToken, tcId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all Object Target Collections
     * Request all Object Target Collections from your account.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Set 0 to start with first entry, set e.g. to 2 to skip first 2 entries. Default value: 0
     * @param {Number} opts.limit Use positive value to define the amount of entries to return [1, 1000] per page. Default value: 1000
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ObjectTargetCollectionResponse>} and HTTP response
     */
    this.getObjectTargetCollectionsWithHttpInfo = function(xVersion, xToken, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling getObjectTargetCollections");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling getObjectTargetCollections");
      }


      var pathParams = {
      };
      var queryParams = {
        'skip': opts['skip'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ObjectTargetCollectionResponse];

      return this.apiClient.callApi(
        '/objectTargetCollection', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all Object Target Collections
     * Request all Object Target Collections from your account.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Set 0 to start with first entry, set e.g. to 2 to skip first 2 entries. Default value: 0
     * @param {Number} opts.limit Use positive value to define the amount of entries to return [1, 1000] per page. Default value: 1000
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ObjectTargetCollectionResponse>}
     */
    this.getObjectTargetCollections = function(xVersion, xToken, opts) {
      return this.getObjectTargetCollectionsWithHttpInfo(xVersion, xToken, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Status - Generate WTO
     * Retrieves information status about a particular scheduled wto generation.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Object Target Collection.
     * @param {String} generationId Unique identifier of the asynchronous job created by a generation endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectTargetCollectionJobResponse} and HTTP response
     */
    this.getWTOStatusWithHttpInfo = function(xVersion, xToken, tcId, generationId) {
      var postBody = null;

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling getWTOStatus");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling getWTOStatus");
      }

      // verify the required parameter 'tcId' is set
      if (tcId === undefined || tcId === null) {
        throw new Error("Missing the required parameter 'tcId' when calling getWTOStatus");
      }

      // verify the required parameter 'generationId' is set
      if (generationId === undefined || generationId === null) {
        throw new Error("Missing the required parameter 'generationId' when calling getWTOStatus");
      }


      var pathParams = {
        'tcId': tcId,
        'generationId': generationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ObjectTargetCollectionJobResponse;

      return this.apiClient.callApi(
        '/objectTargetCollection/{tcId}/generation/wto/{generationId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Status - Generate WTO
     * Retrieves information status about a particular scheduled wto generation.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} tcId Unique identifier of the Object Target Collection.
     * @param {String} generationId Unique identifier of the asynchronous job created by a generation endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectTargetCollectionJobResponse}
     */
    this.getWTOStatus = function(xVersion, xToken, tcId, generationId) {
      return this.getWTOStatusWithHttpInfo(xVersion, xToken, tcId, generationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Object Target Collection
     * Updates an existing Object Target Collection in your account.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} contentType The Content Type of the body. Must be set to application/json.
     * @param {String} tcId Unique identifier of the Object Target Collection.
     * @param {module:model/UpdateObjectTargetCollectionBody} updateObjectTargetCollectionBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ObjectTargetCollectionResponse} and HTTP response
     */
    this.updateObjectTargetCollectionWithHttpInfo = function(xVersion, xToken, contentType, tcId, updateObjectTargetCollectionBody) {
      var postBody = updateObjectTargetCollectionBody;

      // verify the required parameter 'xVersion' is set
      if (xVersion === undefined || xVersion === null) {
        throw new Error("Missing the required parameter 'xVersion' when calling updateObjectTargetCollection");
      }

      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling updateObjectTargetCollection");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling updateObjectTargetCollection");
      }

      // verify the required parameter 'tcId' is set
      if (tcId === undefined || tcId === null) {
        throw new Error("Missing the required parameter 'tcId' when calling updateObjectTargetCollection");
      }

      // verify the required parameter 'updateObjectTargetCollectionBody' is set
      if (updateObjectTargetCollectionBody === undefined || updateObjectTargetCollectionBody === null) {
        throw new Error("Missing the required parameter 'updateObjectTargetCollectionBody' when calling updateObjectTargetCollection");
      }


      var pathParams = {
        'tcId': tcId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Version': xVersion,
        'X-Token': xToken,
        'Content-Type': contentType
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectTargetCollectionResponse;

      return this.apiClient.callApi(
        '/objectTargetCollection/{tcId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update Object Target Collection
     * Updates an existing Object Target Collection in your account.
     * @param {String} xVersion The version of the API to be used. Must be set to 3.
     * @param {String} xToken Your Manager Token.
     * @param {String} contentType The Content Type of the body. Must be set to application/json.
     * @param {String} tcId Unique identifier of the Object Target Collection.
     * @param {module:model/UpdateObjectTargetCollectionBody} updateObjectTargetCollectionBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ObjectTargetCollectionResponse}
     */
    this.updateObjectTargetCollection = function(xVersion, xToken, contentType, tcId, updateObjectTargetCollectionBody) {
      return this.updateObjectTargetCollectionWithHttpInfo(xVersion, xToken, contentType, tcId, updateObjectTargetCollectionBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
