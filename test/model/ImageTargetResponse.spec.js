/**
 * Wikitude Studio API
 * The Wikitude Studio API is a RESTful API which is used to * organize and manipulate projects and its targets * create wtc/wto files which can be used to create trackers in the Wikitude SDK with the JavaScript API * generate/publish a cloud archive to the cloud recognition service (image targets only)  Download API clients: * [`OpenAPI 3.0`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-openapi.zip) * [`JavaScript`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-javascript.zip) * [`Python`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-python.zip) * [`PHP`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-php.zip) * [`TypeScript (NodeJS)`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-typescript-node.zip) * [`Java`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-java.zip) * [`Ruby`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-ruby.zip)  This technical reference formally explains various API endpoints. Visit the [`Studio API documentation`](https://www.wikitude.com/external/doc/documentation/studio/) for a more general description. 
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.0.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WikitudeStudioApiClient);
  }
}(this, function(expect, WikitudeStudioApiClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new WikitudeStudioApiClient.ImageTargetResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ImageTargetResponse', function() {
    it('should create an instance of ImageTargetResponse', function() {
      // uncomment below and update the code to test ImageTargetResponse
      //var instance = new WikitudeStudioApiClient.ImageTargetResponse();
      //expect(instance).to.be.a(WikitudeStudioApiClient.ImageTargetResponse);
    });

    it('should have the property thumbnailUrl (base name: "thumbnailUrl")', function() {
      // uncomment below and update the code to test the property thumbnailUrl
      //var instance = new WikitudeStudioApiClient.ImageTargetResponse();
      //expect(instance).to.be();
    });

    it('should have the property rating (base name: "rating")', function() {
      // uncomment below and update the code to test the property rating
      //var instance = new WikitudeStudioApiClient.ImageTargetResponse();
      //expect(instance).to.be();
    });

    it('should have the property distribution (base name: "distribution")', function() {
      // uncomment below and update the code to test the property distribution
      //var instance = new WikitudeStudioApiClient.ImageTargetResponse();
      //expect(instance).to.be();
    });

    it('should have the property fileSize (base name: "fileSize")', function() {
      // uncomment below and update the code to test the property fileSize
      //var instance = new WikitudeStudioApiClient.ImageTargetResponse();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new WikitudeStudioApiClient.ImageTargetResponse();
      //expect(instance).to.be();
    });

    it('should have the property imageUrl (base name: "imageUrl")', function() {
      // uncomment below and update the code to test the property imageUrl
      //var instance = new WikitudeStudioApiClient.ImageTargetResponse();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new WikitudeStudioApiClient.ImageTargetResponse();
      //expect(instance).to.be();
    });

    it('should have the property modDat (base name: "modDat")', function() {
      // uncomment below and update the code to test the property modDat
      //var instance = new WikitudeStudioApiClient.ImageTargetResponse();
      //expect(instance).to.be();
    });

    it('should have the property creDat (base name: "creDat")', function() {
      // uncomment below and update the code to test the property creDat
      //var instance = new WikitudeStudioApiClient.ImageTargetResponse();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new WikitudeStudioApiClient.ImageTargetResponse();
      //expect(instance).to.be();
    });

    it('should have the property metadata (base name: "metadata")', function() {
      // uncomment below and update the code to test the property metadata
      //var instance = new WikitudeStudioApiClient.ImageTargetResponse();
      //expect(instance).to.be();
    });

    it('should have the property physicalHeight (base name: "physicalHeight")', function() {
      // uncomment below and update the code to test the property physicalHeight
      //var instance = new WikitudeStudioApiClient.ImageTargetResponse();
      //expect(instance).to.be();
    });

  });

}));
